% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-comparetest.R, R/stat-comparetest.R
\name{geom_comparetest}
\alias{geom_comparetest}
\alias{stat_comparetest}
\title{Statistical Compare test}
\usage{
geom_comparetest(
  mapping = NULL,
  data = NULL,
  stat = "comparetest",
  position = "identity",
  height = NULL,
  step_increase = NULL,
  tip_length = NULL,
  ...,
  nudge_x = 0,
  nudge_y = 0,
  parse = FALSE,
  arrow = NULL,
  arrow_fill = NULL,
  lineend = "butt",
  linejoin = "round",
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE
)

stat_comparetest(
  mapping = NULL,
  data = NULL,
  method = "nonparametric",
  method_args = NULL,
  compare_list = NULL,
  label_fn = NULL,
  hide_ns = TRUE,
  sig_level = 0.05,
  geom = "comparetest",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{height}{A list or a numeric vector with length \code{1} or PANEL number
indicating the value where label start. use \link[ggplot2:element]{rel} to signal
values as the fraction of maximal height of the panel. Default: \code{rel(0.05)}}

\item{step_increase}{A list or a numeric vector  with length \code{1} or PANEL
number indicating the increase for every additional comparison to minimize
overlap, use \link[ggplot2:element]{rel} to signal values as the fraction of maximal
height of the panel. Default: \code{rel(0.1)}}

\item{tip_length}{A list or a numeric vector  with length \code{1} or PANEL number
indicating the length of the beard which is drawn down the comparison group,
use \link[ggplot2:element]{rel} to signal values as the fraction of the difference
between the horizontal segment and the maximal value of current group.
Default: \code{rel(0.01)}}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}}. These are often
aesthetics, used to set an aesthetic to a fixed value, like \code{colour = "red"} or \code{size = 3}. They may also be parameters to the paired geom/stat.}

\item{nudge_x, nudge_y}{Horizontal and vertical adjustment to nudge labels by.
Useful for offsetting text from segments, particularly on discrete scales.}

\item{parse}{If \code{TRUE}, the labels will be parsed into expressions and
displayed as described in \code{?plotmath}.}

\item{arrow}{specification for arrow heads, as created by \code{\link[grid:arrow]{grid::arrow()}}.}

\item{arrow_fill}{fill colour to use for the arrow head (if closed). \code{NULL}
means use \code{colour} aesthetic.}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with a warning.
If \code{TRUE} silently removes missing values.}

\item{orientation}{The orientation of the layer. The default (‘NA’)
automatically determines the orientation from the aesthetic mapping.
In the rare event that this fails it can be given explicitly by setting
'orientation' to either "x" or "y"}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{method}{the method used to implement test. Defaults to "nonparametric",
which will use "wilcox.test" to compare two groups and use "kruskal.test" to
compare three or more groups. Support lamda created from a formula. This can
also be "none" indicates no test will be implemented. The method should
always accept a \strong{formula} argument whose value will be set as \code{y ~ x}, the
\code{x} is the discrete variable and the \code{y} is the continuous variable. See
\code{compare_list} argument.}

\item{method_args}{other arguments passed to function specified in
\code{method}.}

\item{compare_list}{A list of atomic vectors with a length of at least 2. The
entries in the vector are the values on the x-axis (or y-axis) indicating the
comparison among what groups. The comparison is always implemented between
the discrete variable (independent variable) in the position aesthetics
(x-axis or y-axis), analogously, the continous variable in the position
aesthetics is regarded as the dependent variable. the order specified in the
\code{compare_list} will be regarded as the level of the independent variable.}

\item{label_fn}{A function or formula which accepts results returned by
function in \strong{method} and return a scalar character. If you want to hide
some results in the \code{geom_comparetest}, return "...hide...".

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function with up to
two arguments: \code{.x} (single argument) or \code{.x} and \code{.y} (two arguments). The
\code{.} placeholder can be used instead of \code{.x}.  This allows you to create
very compact anonymous functions (lambdas) with up to two inputs. Functions
created from formulas have a special class. Use \code{is_lambda()} to test for
it.

If a \strong{string}, the function is looked up in \code{globalenv()}.

Notes: if \strong{method} is "none", this can be a list (whose length should equal
to the number of \strong{PANEL}) of character labels or an atomic character
directly (in this way, this will be used in every PANEL) corresponding to the
result in each comparisons of compare_list, which will be matched by names if
elements in both \strong{label_fn} and \strong{compare_list} have names otherwise by
position.}

\item{hide_ns}{A scalar logical value or a function (can be purrr-style)
which take statistical result as an argument and return a logical value
indicating whether hide this result. If TRUE, this will flag the statistical
result whose \code{p.value >= sig_level} ("p.value" is obtained by
\code{stat_result$p.value}, so ensure the results returned by \code{method} have a
"p.value" item) with "...hide..." and \code{geom_comparetest} will remove rows
with "...hide...".}

\item{sig_level}{The significant level used by \code{hide_ns}. Default: \code{0.05}.}

\item{geom}{The geometric object to use to display the data, either as a
\code{ggproto} \code{Geom} subclass or as a string naming the geom stripped of the
\code{geom_} prefix (e.g. \code{"point"} rather than \code{"geom_point"})}
}
\description{
Statistical Compare test
}
\section{Aesthetics}{

\code{geom_segment()} understands the following aesthetics (required aesthetics
are in bold):
\describe{
\item{\verb{*xmin*} \emph{or} \verb{*ymin*}}{The left (or lower) side of horizontal (or
vertical) segments underneath label}
\item{\verb{*xmax*} \emph{or} \verb{*ymax*}}{The right (or upper) side of horizontal (or
vertical) segments underneath label}
\item{\verb{*y*} \emph{or} \verb{*x*}}{The y (or x) coordinates for labels, usually equal
to the max y-axis (x-axis) value span from xmin (ymin) to xmax (ymax)}
\item{\verb{*label*}}{The statistical test results}
\item{\code{x} \emph{or} \code{y}}{The x (or y) coordinates for labels, usually equal to
(xmin + xmax) / 2 or (ymin + ymax) / 2}
\item{\code{tip}}{A list of data.frame gives the coordinates of tip where x or y
corresponds to the scaled discrete variable or x0 (or y0) is the actual
value of the discrete variable (one of x or x0 (y or y0) is required) and y
(or x) (required) corresponds to the maximal values of current comparison
group. the tip length is reverse to the y value}
}
}

\section{Computed variables}{

\code{stat_comparetest()} provides the following variables, some of which depend on the orientation:
\describe{
\item{xmin \emph{or} ymin}{The left (or lower) side of horizontal (or vertical)
segments underneath label}
\item{xmax \emph{or} ymax}{The right (or upper) side of horizontal (or vertical)
segments underneath label}
\item{x \emph{or} y}{The x (or y) coordinates for labels, usually equal to
\code{(xmin + xmax) / 2} or \code{(ymin + ymax) / 2}}
\item{y \emph{or} x}{The y (or x) coordinates for labels, usually equal to
the max y-axis (x-axis) value span from xmin (ymin) to xmax (ymax)}
\item{label}{The statistical test results}
\item{tip}{A list of data.frame gives the coordinates of tip where x or y
corresponds to the scaled discrete variable, and y (or x) corresponds to
the maximal values of current comparison group. the tip length is reverse
to the y value}
}
}

\examples{
\dontrun{
library(ggplot2)
library(ggstattest)
ggplot(mpg, aes(class, hwy)) +
    geom_boxplot() +
    geom_comparetest()
ggplot(mpg, aes(class, hwy)) +
    geom_boxplot() +
    geom_comparetest(
        compare_list = list(
            c("compact", "pickup"),
            c("subcompact", "suv")
        )
    )
ggplot(mpg, aes(class, hwy)) +
    geom_boxplot() +
    geom_comparetest(
        aes(xmin = xmin, xmax = xmax, y = y, label = label),
        stat = "identity",
        data = data.frame(
            y = c(30, 40),
            xmin = c(4, 1),
            xmax = c(5, 3),
            label = c("**", "*")
        ),
        inherit.aes = FALSE
    )
}
}
